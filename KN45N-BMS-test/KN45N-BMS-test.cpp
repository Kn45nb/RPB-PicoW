/*============================================================================================================================================================================
Information
==============================================================================================================================================================================
SDK: 		v2.1.0
Toolchain:	13.3Rel1
Ninja:		v1.12.1
CMake:		v3.31.4
============================================================================================================================================================================*/



/*============================================================================================================================================================================
Include	Lib
============================================================================================================================================================================*/
#include	<stdio.h>
#include	<stdint.h>


// SDK Pico
#include	"pico/stdlib.h"
#include	"hardware/spi.h"
#include	"hardware/i2c.h"
#include	"pico/cyw43_arch.h"
#include	"hardware/uart.h"

// Other Lib
// #include	"SSD1306.h"



/*============================================================================================================================================================================
Defines     Var                             Val             M√¥ t·∫£
============================================================================================================================================================================*/
// SPI defines
#define     SPI_PORT                        spi0
#define     PIN_MISO                        16
#define     PIN_CS                          17
#define     PIN_SCK                         18
#define     PIN_MOSI                        19


// I2C defines
#define     I2C_PORT                        i2c0
#define     I2C_SDA                         8
#define     I2C_SCL                         9
// SSD1306 defines
#define     SCREEN_WIDTH                    128
#define     SCREEN_HEIGHT                   64
#define     OLED_RESET                      -1
#define     SCREEN_ADDRESS                  0x3C



// // UART defines (default UART 'uart0')
// #define     UART_ID                         uart1
// #define     BAUD_RATE                       115200
// // PIN
// #define     UART_TX_PIN                     4
// #define     UART_RX_PIN                     5




/*============================================================================================================================================================================
Const Type        Var                           Val                     M√¥ t·∫£                                               ƒê∆°n v·ªã          Note
============================================================================================================================================================================*/
// Package: _BIX
const   uint8_t     REVISION                    = 0x0;                  // Version of the data structure _BIX               // N/a          // Basic: 0x0 (?const)
const   bool        POWER_UNIT                  = 0x1;                  // Bi·∫øn gi√° tr·ªã ƒë∆°n v·ªã                              // N/a          // 0: mWh, 1: mAh
const   uint32_t    DESIGN_CAPACITY             = 0x186A0;              // Dung l∆∞·ª£ng thi·∫øt k·∫ø c·ªßa pin                      // POWER_UNIT   // !set: 0x0 || 0xFFFFFFFF
        uint32_t    LAST_FULL_CHARGE_CAPACITY   = 0x186A0;              // Dung l∆∞·ª£ng s·∫°c ƒë·∫ßy cu·ªëi c√πng c·ªßa pin             // POWER_UNIT   // !set: 0x0 || 0xFFFFFFFF, max: DESIGN_CAPACITY, @Kn45nb C·∫ßn m·ªôt b·ªô logic i++, kh·ªüi t·∫°o l√† DESIGN_CAPACITY tr·ª´ d·∫ßn m·ªói l·∫ßn time full.
const   bool        BATTERY_TECHNOLOGY          = 0x1;                  // C√¥ng ngh·ªá t√°i t·∫°o pin (kh·∫£ nƒÉng s·∫°c)             // N/a          // 0: No, 1: Yes
const   uint16_t    DESIGN_VOLTAGE              = 0x4A38;               // ƒêi·ªán √°p thi·∫øt k·∫ø c·ªßa pin                         // mV           // !set: 0x0 || 0xFFFFFFFF, Basic voltage: 19V/12V
        uint32_t    DESIGN_CAPACITY_OF_WARNING  = 0x2710;               // Dung l∆∞·ª£ng c·∫£nh b√°o thi·∫øt k·∫ø c·ªßa pin             // POWER_UNIT   // Windows ignores this value (Nh∆∞ng Bios th√¨ r·∫•t hay ƒë·ªçc)
        uint32_t    DESIGN_CAPACITY_OF_LOW      = 0x1388;               // Dung l∆∞·ª£ng th·∫•p thi·∫øt k·∫ø c·ªßa pin (hibernation)   // POWER_UNIT   // 0-5% of LAST_FULL_CHARGE_CAPACITY, @Kn45nb C·∫ßn fun ho·∫∑c logic c·∫≠p nh·∫≠t sau khi update LAST_FULL_CHARGE_CAPACITY
const   uint8_t     CAPACITY_GRANULARITY_1      = 0x1;                  // ƒê·ªô tinh m·ªãch (ph√¢n gi·∫£i) dung l∆∞·ª£ng tr√™n ng∆∞·ª°ng  // POWER_UNIT   // <=1% of DESIGN_CAPACITY
const   uint8_t     CAPACITY_GRANULARITY_2      = 0x1;                  // ƒê·ªô tinh m·ªãch (ph√¢n gi·∫£i) dung l∆∞·ª£ng d∆∞·ªõi ng∆∞·ª°ng  // POWER_UNIT   // <=75mW, (exp: 0.25% of 25000mWh)
        uint8_t     CYCLE_COUNT                 = 0x0;                  // S·ªë l·∫ßn s·∫°c c·ªßa pin                               // Times        // !set: 0xFFFFFFFF
/*cont*/uint32_t    MEASUREMENT_ACCURACY        = 0x1;                  // ƒê·ªô ch√≠nh x√°c ƒëo l∆∞·ªùng                            // PPM          // >95000 (95%), 1%=1000
/*cont*/uint16_t    MAX_SAMPLING_TIME           = 0x1;                  // Th·ªùi gian l·∫•y m·∫´u t·ªëi ƒëa c·ªßa _BST                // ms           //
/*cont*/uint16_t    MIN_SAMPLING_TIME           = 0x1;                  // Th·ªùi gian l·∫•y m·∫´u t·ªëi thi·ªÉu c·ªßa _BST             // ms           //
/*cont*/uint16_t    MAX_AVERAGING_INTERVAL      = 0x1;                  // Th·ªùi gian trung b√¨nh max c·ªßa c·∫£m bi·∫øn PIN        // ms           //
/*cont*/uint16_t    MIN_AVERAGING_INTERVAL      = 0x1;                  // Th·ªùi gian trung b√¨nh min c·ªßa c·∫£m bi·∫øn PIN        // ms           //
const   char        MODEL_NUMBER[]              = "Notebook";           // M√£ s·ªë model c·ªßa pin                              // N/a          // !NULL
const   char        SERIAL_NUMBER[]             = "0001";               // S·ªë serial duy nh·∫•t c·ªßa pin                       // N/a          // !NULL
const   char        BATTEY_TYPE[]               = "LION";               // Lo·∫°i pin                                         // N/a          //
const   char        OEM_INFORMATION[]           = "MAKE BY @Kn45nb";    // Th√¥ng tin OEM                                    // N/a          // X·∫°o lol ·ªü ƒë√¢y th√¥i, kh√¥ng c·∫ßn quan t√¢m @Kn45nb


// Package: _BST
        uint8_t     BATTERY_STATE               = 0x1;                  // Tr·∫°ng th√°i pin                                   // N/a          // 0x0000: Charging, 0x0001: Discharging, ...
        int16_t     BATTERY_PRESENT_RATE        = 0x1;                  // T·ªëc ƒë·ªô S·∫°c/x·∫£ (ƒêi·ªán √°p gi·ªØa 2 ƒë·∫ßu ngu·ªìn ƒëi·ªán)    // POWER_UNIT   // !set: 0x0 || 0xFFFFFFFF, (√Çm s·∫°c, d∆∞∆°ng x·∫£) @Kn45nb $Do that
        uint32_t    BATTEY_REMAINING_CAPACITY   = 0x0;                  // Dung l∆∞·ª£ng c√≤n l·∫°i c·ªßa pin                       // POWER_UNIT   // !set: 0x0 || 0xFFFFFFFF
        uint16_t    BATTERY_VOLTAGE             = 0x4A38;               // ƒêi·ªán √°p hi·ªán t·∫°i c·ªßa pin                         // mV           // 
// Note: C√≥ th·ªÉ s·ª≠ d·ª•ng c√°c c√¥ng c·ª• nh∆∞ Microsoft ASL Compiler ƒë·ªÉ ki·ªÉm tra t√≠nh tu√¢n th·ªß c·ªßa c√°c b·∫£ng ACPI. @Kn45nb


// Package: _BIF (old version for Legacy. Don't carefull that ü•≤)


// Package: _BTP (Checkpoint charging using c∆° ch·∫ø ƒêi·ªÉm ng·∫Øt pin. C·∫ßn d√πng trong powercfg/batteryreport @Kn45nb)


// Package: _SUN (Option: S·ªë ƒë∆°n v·ªã khe c·∫Øm, n·∫øu ch∆°i th·ª© t·ª± pin th√¨ kh√¥ng c·∫ßn @Kn45nb)


// Package: _STA (Sau l√†m Funsion Shutdows PSU/PIN th√¨ m·ªõi ƒë·ªông t·ªõi @Kn45nb)



/*============================================================================================================================================================================
Sub Funsion
============================================================================================================================================================================*/



/*============================================================================================================================================================================
Main Funsion
============================================================================================================================================================================*/
int main()
{
    stdio_init_all();


    // Initialise the Wi-Fi chip
    if (cyw43_arch_init())
    {
        printf("Wi-Fi init failed\n");
        return -1;
    }


    // // SPI initialisation
    // spi_init(SPI_PORT, 1000*1000);                  // 1MHz
    // gpio_set_function(PIN_MISO, GPIO_FUNC_SPI);
    // gpio_set_function(PIN_CS,   GPIO_FUNC_SIO);
    // gpio_set_function(PIN_SCK,  GPIO_FUNC_SPI);
    // gpio_set_function(PIN_MOSI, GPIO_FUNC_SPI);
    // // Chip select is active-low, so we'll initialise it to a driven-high state
    // gpio_set_dir(PIN_CS, GPIO_OUT);
    // gpio_put(PIN_CS, 1);
    // https://github.com/raspberrypi/pico-examples/tree/master/spi


    // I2C Initialisation
    // i2c_init(I2C_PORT, 400*1000);                   // 400Khz
    // gpio_set_function(I2C_SDA, GPIO_FUNC_I2C);
    // gpio_set_function(I2C_SCL, GPIO_FUNC_I2C);
    // gpio_pull_up(I2C_SDA);
    // gpio_pull_up(I2C_SCL);
    // https://github.com/raspberrypi/pico-examples/tree/master/i2c

    // SSD1306 oled(i2c0);
    // oled.begin();
    // oled.clearDisplay();

    // // Hi·ªÉn th·ªã vƒÉn b·∫£n
    // oled.printText(0, 0, "Hello, OLED!", true);
    // oled.display();
    
    
    
    
    
    

    // // Set up our UART
    // uart_init(UART_ID, BAUD_RATE);
    // // Set the TX and RX pins by using the function select on the GPIO
    // // Set datasheet for more information on function select
    // gpio_set_function(UART_TX_PIN, GPIO_FUNC_UART);
    // gpio_set_function(UART_RX_PIN, GPIO_FUNC_UART);
    
    // Use some the various UART functions to send out data
    // In a default system, printf will also output via the default UART
    // Send out a string, with CR/LF conversions
    // uart_puts(UART_ID, " Hello, UART!\n");
    // For more examples of UART use see https://github.com/raspberrypi/pico-examples/tree/master/uart


    while (true)
    {
        tight_loop_contents();
        // Pico W LED
        cyw43_arch_gpio_put(CYW43_WL_GPIO_LED_PIN, 1);
        sleep_ms(1000);
        cyw43_arch_gpio_put(CYW43_WL_GPIO_LED_PIN, 0);
        sleep_ms(1000);
    }
}
